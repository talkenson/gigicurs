import { InputFile, Message, Update } from 'grammy/types';
import {Context, InputMediaBuilder} from 'grammy';
import {presentCards} from "../../modules/cards/presentCards";
import {selectSomeCards} from "../../modules/cards/selectSomeCards";
import * as fs from "fs/promises";
import path from "path";


export const messageHandler = async (ctx: Context, message: Message & Update.NonChannel) => {
    const isStartingWithCommand = message.text?.startsWith('/');
    if (!isStartingWithCommand || !message.text) {
        return;
    }
    const command = message.text.slice(1).split(/\s+/, 1)[0];
    if (!command.length) {
        return;
    }

    switch (command.trim().toLowerCase()) {
        case 'start':
            await ctx.reply(
                '<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ —á–∞—Ä—É—é—â–µ–º –º–∏—Ä–µ —Ç–∞—Ä–æ! üîÆüí´</b>\n\n' +
                '–•–æ—Ç–∏—Ç–µ –∑–∞–≥–ª—è–Ω—É—Ç—å –∑–∞ –∑–∞–≤–µ—Å—É —Å—É–¥—å–±—ã –∏ —É–∑–Ω–∞—Ç—å, —á—Ç–æ –∑–≤–µ–∑–¥—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –≤–∞–º? –ú–µ—á—Ç–∞–µ—Ç–µ –ø—Ä–∏–æ—Ç–∫—Ä—ã—Ç—å —Ç–∞–π–Ω—ã –ø—Ä–æ—à–ª–æ–≥–æ –∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –Ω–∞—Å—Ç–æ—è—â–µ–º?\n' +
                '–Ø ‚Äì –≤–∞—à –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä —Ç–∞—Ä–æ, —Ç–∞—Ä–æ–ª–æ–≥ –•–µ–ª–µ–Ω, –∏ —è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ —Ä–∞–∑–ª–æ–∂–∏—Ç—å –∫–∞—Ä—Ç—ã –∏ –ø–æ–≤–µ–¥–∞—Ç—å –≤–∞–º –∏—Ö –º—É–¥—Ä—ã–π —è–∑—ã–∫. ‚ú®‚≠êÔ∏è\n\n' +
                '<b>–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å:</b>\n' +
                '<i>"–ß—Ç–æ –º–µ–Ω—è –∂–¥–µ—Ç –≤ –ª—é–±–≤–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ?"</i>\n' +
                '<i>"–ö–∞–∫–∏–µ —É –º–µ–Ω—è —à–∞–Ω—Å—ã –Ω–∞ —É—Å–ø–µ—Ö –≤ —ç—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ?"</i>\n' +
                '<i>"–ß—Ç–æ –æ–±–æ –º–Ω–µ –¥—É–º–∞—é—Ç –±–ª–∏–∑–∫–∏–µ?"</i>\n\n' +
                '–Ø —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É –≤–∞–º:\n' +
                '–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–µ–±–µ –∏ —Å–≤–æ–∏—Ö —á—É–≤—Å—Ç–≤–∞—Ö. ‚ù§Ô∏è\n' +
                '–ü—Ä–∏–Ω—è—Ç—å –≤–µ—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ. ‚úÖ\n' +
                '–ù–∞–π—Ç–∏ –≤—ã—Ö–æ–¥ –∏–∑ —Å–ª–æ–∂–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏. üõ£Ô∏è\n' +
                '–°–¥–µ–ª–∞—Ç—å —à–∞–≥ –∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—é –º–µ—á—Ç—ã. üë£\n' +
                '–ì–æ—Ç–æ–≤—ã –∫ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–º—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é –≤ –º–∏—Ä —Ç–∞—Ä–æ? üéÜ\n\n' +
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /taro, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥',
                { parse_mode: 'HTML' },
            );
            break;

        case 'taro':
            const cards = selectSomeCards(3)
            const images = await Promise.all(cards.filter(card => card.image !== undefined).map(async (card) => {
                return InputMediaBuilder.photo(
                    new InputFile(
                        new Uint8Array(
                            await fs.readFile(
                                path.resolve('.', 'assets', card.image as string)
                            )
                        )
                    )
                )
            }))
            await ctx.replyWithMediaGroup(images);
            await ctx.reply(
                presentCards(cards),
                { parse_mode: 'HTML' },
            );
            break;

        default:
            await ctx.reply(
                '–ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /taro —Å –≤–æ–ø—Ä–æ—Å–æ–º, –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º',
            );
            break;

    }
};
